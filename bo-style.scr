;;;;; bo-style.scr -- Scribe style file for bastiat.org -*- Lisp -*-

(style 'fare-style)
(style 'oeuvres_bastiat)


;;; All that is to define correctly...

(define-markup (in-bo
                (:title #f) (:lang #f) (:charset *default-charset*))
  (apply* with-header :title title :lang lang :charset charset
	  :icon "pic/favicon.ico"
	  :css "bastiat.css"
    :script '("jquery-3.0.0.min.js" "jquery.sticky-kit.min.js")
      '())
  (with-footer :left (bo-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [A site by ,(FRR) ,(webbug)]))

(define-markup (in-boe (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'en :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
    :script '("../jquery-3.0.0.min.js" "jquery.sticky-kit.min.js")
	  '())
  (with-footer :left (boe-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [A site by ,(FRR) ,(webbug)]))

(define-markup (in-bof (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'fr :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
:script "../jquery-3.0.0.min.js"
    :script '("../jquery-3.0.0.min.js" "jquery.sticky-kit.min.js")
	  '())
  (with-footer :left (bof-ref #f (tt[Bastiat.org]))
	       :middle (strong(Lib.ref))
	       :right [Un site par ,(FRR) ,(webbug)]))

(define-markup (in-boes (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'es :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (boes-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [Un sitio por ,(FRR) ,(webbug)]))


(define (hist-note x) (*list "[" x "]"))
(define (xbof-ref file title)
  (if (file-exists? (make-string1 file ".scr"))
      (bof-ref file title)
      title))
(def-ref-maker elb-ref "http://www.econlib.org/library/Bastiat/")

;; Les éditions Leter ont disparu, et Michel Leter aussi. Paix à son âme.
;;(def-ref-maker leter-ref "http://aboutleter.chez.tiscali.fr/pages/etexts%20Bastiat/")
;; http://members.tripod.com/michelleter/pages/etextsbastiat/
(defun leter-ref (path &rest r) (declare (ignore path)) r)

(define-markup (cite-text (:file #f) . title)
   (let ((title (cite-title (apply* *list title))))
     (if file (bof-ref file title) title)))
(define-markup (make-char (:txt "") (:html #f) (:tex #f) (:info #f) (:man #f))
  (let ((foo (case *scribe-format*
	       ((txt) txt)
	       ((html) (or html txt))
	       ((tex) (or tex txt))
	       ((info) (or info txt))
	       ((man) (or man txt)))))
   (lambda () (display foo) #f)))
(define (quotation x) (p (it x)))

(define (tdRT . x) (apply* td :align 'right :valign 'top x))
(define (tdLT . x) (apply* td :align 'left :valign 'top x))
(define (tdRB . x) (apply* td :align 'right :valign 'bottom x))
(define (tdLB . x) (apply* td :align 'left :valign 'bottom x))
(define (trLT . x) (apply* tr (map* tdLT x)))
(define (trLT* x) (apply* trLT x))
(define (simple-table x) (apply* table (map* trLT* x)))
(define (tdRT2 . x) (apply* td :colspan 2 :align 'right :valign 'top x))
(define (tdLT2 . x) (apply* td :colspan 2 :align 'left :valign 'top x))
(define (tdCT . x) (apply* td :align 'center :valign 'top x))
(define (tdCB . x) (apply* td :align 'center :valign 'bottom x))
(define (tdCT2 . x) (apply* td :colspan 2 :align 'center :valign 'top x))
(define (tdCB2 . x) (apply* td :colspan 2 :align 'center :valign 'bottom x))
(define (enFr x) (*list x (nbsp) "fr."))


(define (ELeter)
  (leter-ref "Fr%8Ed%8Eric%20Bastiat"
	     [Édition Leter des ,(oe)uvres complètes de Frédéric Bastiat]))

(define (Har-ref x) (bof-ref "harmonies" (cite-title x)))
(define (Soph-ref x) (bof-ref "sophismes" (cite-title x)))
(define (Grat-ref x) (bof-ref "gratuite_du_credit" (cite-title x)))
(define (HarmoniesEconomiques) (Har-ref [Harmonies Économiques]))
(define (Harmonies_economiques) (Har-ref [Harmonies économiques]))
(define (SophismesEconomiques) (Soph-ref [Sophismes Économiques]))
(define (Sophismes_economiques) (Soph-ref [Sophismes économiques]))
(define (GratuiteCredit) (Grat-ref [Gratuité du Crédit]))
(define (Gratuite_credit) (Grat-ref [Gratuité du crédit]))

(define (AlainMadelin)
  (ref :url "http://www.alainmadelin.com/"
	[Alain Madelin]))
(define (pmadrolle)
  (ref :url "http://ami.du.laissez-faire.eu/"
	[Patrick Madrolle]))
(define (belem)
  (ref :url "http://lemennicier.com/"
	[Bertrand Lemennicier]))
(define (JML)
  (ref :url "http://www.nouveau-monde.org/" [Jean-Michel Leloup]))
(define (cbalanca) [Claude Balança]) ; MIA http://www.ibastiat.com/
(define (clement.junca)
  [Clément J])
  ;;(ref :url "http://fr.wikipedia.org/wiki/Utilisateur:Eudoxe" [Clément Junca])
(define (cvincent)
  (ref :url "http://perso.club-internet.fr/cvincent/" [Christophe Vincent]))
(define (frk.paris)
  ;(ref :url "http://perso.wanadoo.fr/arcadie/" [Franck Paris])
  [FP])
(define (bruno)
  (ref :url "http://www.fdn.fr/~brouchou/toutenvrac/" [Bruno Rouchouse]))
(define (JdG) [Jacques de Guenin])
(define (andre) [André de Guenin])
(define (laura) [Laura Le Coz])
(define (loic) [Loïc Étienne])
(define (fguerinet) [Franck Guérinet])
(define (krylenko)
	(ref :url "http://www.krylenko.net/index.php/Bastiat"
	     [Krylenko])) ; JB
(define (leter) (ref :url "http://leter.net/" [Michel Leter]))
(define (GregB) [Gregory Bodylski])
(define (WikiSourceFr)
  (ref :url "http://fr.wikisource.org/"
	[WikiSource]))
(define (numeriseurs)
  (ref :url "mailto:numeriseurs&#64;bastiat.net"
      [numeriseurs,(at)bastiat.net]))
(define (bastiat.ftp)
  (ref :url "ftp://numerisons@bastiat.mine.nu"
	(tt[ftp://numerisons,(at)bastiat.mine.nu])))
(define (Bastiat.org)
  (ref :url =bo.url= [Bastiat.org]))
(define (Scribe.url)
  (ref :url "http://www-sop.inria.fr/mimosa/fp/Scribe/" [Scribe]))
(define (Exscribe.url)
  (ref :url "http://www.cliki.net/Exscribe" [Exscribe]))
(define (oeuvres.completes.FB)
  [,(ref :url "guillaumin.html" [,(oe)uvres complètes])
	de Frédéric Bastiat])
(def-ref-maker BNF-ref "http://gallica.bnf.fr/" [BNF] "")
(define (Gallica)
  (BNF-ref #f [gallica.bnf.fr]))
(define (BNF)
  (BNF-ref #f [BNF]))
(define (Gallica.Bastiat.ref x)
  (BNF-ref "metacata.idq?Mod=i&CiRestriction=%28%40_Auteur%20bastiat%29&RPT=" x))
(define (FEE)
  (ref :url "http://www.fee.org/" [FEE]))
(define (NdEBO)
  (it [(Note de l'éditeur de ,(Bastiat.org).)]))
(define (NdEEF)
  (it [(Note de l'éditeur de l'édition de la ,(FEE).)]))
(define (NdML)
  (it [(Note de ,(leter))]))
(define (EO18xx v a)
  [édition originale en ,(id v) volumes (18,(id a))
	des ,(oeuvres.completes.FB)])
(define (EO1854) (EO18xx 6 54))
(define (EO1855) (EO18xx 6 55))
(define (EO1862) (EO18xx 7 62))
(define (EO1863) (EO18xx 7 63))
(define (EO1864) (EO18xx 7 64))

(set! *scribe-background* "white")
(set! *scribe-foreground* "black")
(set! *scribe-tbackground* "#99FF6F")
(define *section-title-background* "#CCFFB8")

(define bo-header-args
  '(:textcolor "black" :bgcolor "white"
    :icon "http://bastiat.org/pic/favicon.ico"))

(define (roman-name num)
  (vector-ref
	'#(#f "I" "II" "III" "IV" "V" "VI" "VII" "VIII" "IX"
	   "X" "XI" "XII" "XIII" "XIV" "XV" "XVI" "XVII" "XVIII" "XIX" "XX")
	num))

(define (tradlink a b . rest)
 (if (keyword? a)
     (case a
       ((:bof) (*list* (bof-ref b (car rest)) (cdr rest)))
       ((:bof-) (*list* (bof-ref b (car rest) (cadr rest)) (cddr rest)))
       ((:boe) (*list* (boe-ref b (car rest)) (cdr rest)))
       ((:boes) (*list* (boes-ref b (car rest)) (cdr rest)))
       ((:elb) (*list* (elb-ref b (car rest)) (cdr rest)))
       ((:elb-) (*list* (elb-ref b (car rest) (cadr rest)) (cddr rest))))
     (*list* (ref :url a b) rest)))
(define (trad x)
   (inbracket
    (*list*
     (join* "; "
	    (map* (lambda (x) (apply* tradlink x)) x)))))




;;; Les super fonctions relatives à bastiat-db

(defun filter-bastiat-db (fun)
  (remove-if-not
   (lambda (x)
     (handler-case
   (apply fun x)
       (error (c)
   (error "Error while filtering bastiat-db entry: ~S.~%Entry: ~S~%"
    c x))))
   bastiat-db))

(defmacro filtering-bastiat-db (&body body)
  `(filter-bastiat-db
    (lambda (id &key titre date livre journal lettre oc1862 &allow-other-keys) (declare (ignorable oc1862 livre journal titre lettre date id)) ,@body)))

(defun getf-many (key plist)
  "given a PLIST, extract all the entries starting with the KEY, not just the first one"
  (loop :for (k v) :on plist :by #'cddr :when (eq k key) :collect v))

(defun text-id (x) (first x))
(defun text-date (x) (getf (rest x) :date))
(defun text-livre (x) (getf (rest x) :livre))
(defun text-titre (x) (getf (rest x) :titre))
(defun text-chapter (x) (getf (text-livre x) :ch))
(defun text-journaux (x) (getf-many (rest x) :journal))
(defun journal-titre (j) (getf j :titre))
(defun text-journal (x &optional journal)
  (if journal
      (find journal (text-journaux x) :key #'journal-titre)
      (getf (rest x) :journal)))
(defun text-journal-titre (x &optional journal) (getf (text-journal x journal) :titre))
(defun text-journal-date (x &optional journal) (getf (text-journal x journal) :date))
(defun text-lettre (x) (getf (rest x) :lettre))
(defun text-lettre-a (x) (getf (text-lettre x) :a))

(defun text-journal-date-fun (journal)
  (lambda (x) (getf (text-journal x journal) :date)))

(defun precedent (item list &key (test 'string-equal) (key 'first))
  (loop :for precedent = nil :then courant :for courant :in list
    :when (funcall test item (funcall key courant))
    :return precedent))

(defun suivant (item list &key (test 'string-equal) (key 'first))
  (loop :for (courant suivant) :on list
    :when (funcall test item (funcall key courant))
    :return suivant))

(defun precedent-texte (list)
  (string-downcase (text-id (precedent (pathname-name (current-lisp-file-pathname)) list))))

(defun suivant-texte (list)
  (string-downcase (text-id (suivant (pathname-name (current-lisp-file-pathname)) list))))

;(sort ma-liste #'< :key (lambda (x) (destructuring-bind (id &key livre &allow-other-keys) (getf livre :ch))))
;(sort ma-liste #'string< :key (lambda (x) (getf (rest x) :date)))
;(sort ma-liste 'string< :key 'text-date)
;(sort ma-liste '< :key 'text-chapter)
;(uiop:current-lisp-file-pathname)


;titre du document courant
(define (titre-courant)
(text-titre (first (filtering-bastiat-db (equal (pathname-name (current-lisp-file-pathname)) (string-downcase id)))))
)


; Définition des sous-listes

(defparameter serie_chronologique
 (sort (filtering-bastiat-db (not (null date))) 'string< :key 'text-date))

(defparameter correspondance
 (sort (filtering-bastiat-db (and (not (null lettre)) (not (null date)))) 'string< :key 'text-date))
(defparameter lettres_a_arrivabene
 (sort (filtering-bastiat-db (member 'arrivabene lettre)) 'string< :key 'text-date))
(defparameter lettres_a_calmetes
 (sort (filtering-bastiat-db (member 'calmetes lettre)) 'string< :key 'text-date))
(defparameter lettres_a_cheuvreux
 (sort (filtering-bastiat-db (or (member 'mmecheuvreux lettre) (member 'mcheuvreux lettre) (member 'lcheuvreux lettre))) 'string< :key 'text-date))
(defparameter lettres_a_cobden
 (sort (filtering-bastiat-db (member 'cobden lettre)) 'string< :key 'text-date))
(defparameter lettres_a_coudroy
 (sort (filtering-bastiat-db (member 'coudroy lettre)) 'string< :key 'text-date))
(defparameter lettres_a_domenger
 (sort (filtering-bastiat-db (member 'domenger lettre)) 'string< :key 'text-date))
(defparameter lettres_a_paillottet
 (sort (filtering-bastiat-db (member 'paillottet lettre)) 'string< :key 'text-date))
(defparameter lettres_a_say
 (sort (filtering-bastiat-db (member 'say_h lettre)) 'string< :key 'text-date))
(defparameter lettres_a_schwabe
 (sort (filtering-bastiat-db (or (member 'mmeschwabe lettre) (member 'mschwabe lettre))) 'string< :key 'text-date))

(defparameter articles
 (sort (filtering-bastiat-db (not (null journal))) 'string< :key 'text-date))
(defparameter articles_le
 (sort (filtering-bastiat-db (member 'le journal)) 'string< :key 'text-journal-date))
(defparameter articles_jde
 (sort (filtering-bastiat-db (member 'jde journal)) 'string< :key 'text-journal-date))
(defparameter articles_mb
 (sort (filtering-bastiat-db (member 'mb journal)) 'string< :key 'text-journal-date))
(defparameter articles_cf
 (sort (filtering-bastiat-db (member 'cf journal)) 'string< :key 'text-journal-date))
(defparameter articles_rf
 (sort (filtering-bastiat-db (member 'rf journal)) 'string< :key 'text-journal-date))
(defparameter articles_jb
 (sort (filtering-bastiat-db (member 'jb journal)) 'string< :key 'text-journal-date))
(defparameter articles_jd
 (sort (filtering-bastiat-db (member 'jd journal)) 'string< :key 'text-journal-date))
(defparameter articles_sp
 (sort (filtering-bastiat-db (member 'sp journal)) 'string< :key 'text-journal-date))

(defparameter harmonies_eco
 (sort (filtering-bastiat-db (member 'harmonies livre)) '< :key 'text-chapter))
(defparameter credit
 (sort (filtering-bastiat-db (member 'gratuite_du_credit livre)) '< :key 'text-chapter))
(defparameter cobdenligue
 (sort (filtering-bastiat-db (member 'cobden_ligue livre)) '< :key 'text-chapter))
(defparameter propriete_spoliation
 (sort (filtering-bastiat-db (member 'prospo livre)) '< :key 'text-chapter))




;;;        *** Les magnifiques fonctions de Laura *** (Car Laura met des commentaires, elle.)

(define (NdL)
  (it [(Note de Laura LC.)]))


;;; Footnotes

;y'a un bug: faire en sorte que les notes restent à la même place on reload.

;bon, je vais commenter à mort, c'est parti...

(define (script_sidenotes) (%raw "<script>

//détecte les recouvrements (nouvelle/ancienne note)

var overlap = function(a, b) {
  return (a.offset().top < b.offset().top + b.height() + 10)
};

var sidenotes = function() {

//Si la largeur de fenêtre dépasse un certain seuil...

  if ( $(window).width() > 1000) {
var scrollTop = $(window).scrollTop();
//Répéter autant de fois qu'il y a de footnotes...

for (var i=0; i<$('.footnote').length; i++) {

//Soit 'note' la footnote en cours.

  var note = $('.footnote').eq(i);

//Soit 'number' son numéro. (i+1, donc)

  var number = (i + 1).toString();

//Soit refname le nom de la footnoteref correspondante.

  var refname = 'a[name=footnoteref' + number + ']';

//Soit ref la footnoteref correspondante.

  var ref = $(refname);

//Soit y sa distance par rapport au haut du document. (C'est là qu'il y a un problème: quand je scrolle jusqu'en bas, j'obtiens des valeurs négatives alors que normalement offset est indépendant du scroll.)
//Bon, je rajoute scrollTop.

  var y = ref.offset().top + scrollTop;

//Fixer le y de 'note' de égal au y de la footnoteref.

  note.offset({top: y});

//Ça c'est pour régler le problème des notes trop hautes, appelées depuis le titre et donc cachées par le header.
  var haut = $('.bastiat').offset().top + scrollTop;
  if (note.offset().top - haut < 0) {note.offset({top: haut});};

//Ça c'est pour vérifier un éventuel overlap avec la note précédente, et positionner la nouvelle note sous la précédente le cas échéant.
  if (lastnote) {
      if (overlap(note, lastnote)) {
          note.offset({top: lastnote.offset().top + lastnote.height() + 10});
          };
      };
//Et ça c'est pour réinitialiser lastnote à chaque cycle.
  var lastnote = note;

};
//Fin du loop
};
//Fin du if window machin
};
//Fin de la fonction

$(document).ready(function() {
sidenotes();
window.onresize = function() {
    sidenotes();
};
});
</script>"))




;;Mise en forme des liens

; Liens vers l'index des noms de personnes
(defun np (x &rest r) (a :href (strcat "personnes.html#" x) :class "np" r))

; Liens vers l'index des titres de journaux
(defun tj (x &rest r) (a :href (strcat "journaux.html#" x) :class "tj" r))
;mettre r en italique

;Classe "bastiat" pour enrober le texte de Bastiat
(defun bastiat (&rest r) (div :class "bastiat" r))
;pour les textes d'autres auteurs
(defun other (&rest r) (div :class "other" r))

(defun sommaire (&rest r) (div :class "sommaire" r))
(defun chapeau (&rest r) (div :class "chapeau" r))

;style épistolaire
(defun cher (&rest r) (p :class "cher" r))
(defun politesse (&rest r) (p :class "politesse" r))
(defun sign (&rest r) (p :class "sign" r))
(defun date (&rest r) (div :class "date" r))
(define (FredB) [,(sc[Frédéric]) BASTIAT])
(defun sidenote (&rest r) (div :class "sidenote" r))

;pour les listes de paragraphes courts
(defun liste (&rest r) (div :class "liste" r))

;pour les épigraphes
(defun epigraphe (&rest r) (div :class "epigraphe" r))

(define (retrait) [      ])
(defun discours (&rest r) (div :class "discours" r))


(defun snote
    (contenu titre)
    (%raw
      (strcat "<span class='explain' data-title='Title' data-explain='"
      contenu
      "'>"
      titre
      "</span>"))
)

(defun sidecontent (&rest r) (div :id "sidecontent" r))

;;; FOOTER

;pour le footer et le header inamovibles
(defun footer (&rest r) (div :class "footer" r))

(defun titre (&rest r) (div :class "titre" r))
(defun auteur (&rest r) (div :class "auteur" r))

(defun gauche (&rest r) (div :class "gauche" r))

(defun sidebar (&rest r) (div :id "sidebar" r))

;(Pour les liens retour/préc/suiv)
(defun
  arbor
  (titre adresse prec suiv)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='prec' href='"
    prec
    "'>«««</a>
    <a class='suiv' href='"
    suiv
    "'>»»»</a>
    </div>"
  ))
)

(defun
  premier
  (titre adresse suiv)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='suiv' href='"
    suiv
    "'>»»»</a>
    </div>"
  ))
)

(defun
  dernier
  (titre adresse prec)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='prec' href='"
    prec
    "'>«««</a>
    </div>"
  ))
)

(defun soph (prec suiv) (arbor "Sophismes économiques" "sophismes.html" prec suiv))


;; Pour la mise en forme des listes d'articles dans les sommaires de journaux

(defun
  article
  (date adresse titre about)
  (%raw (strcat
    "<li class='article'><div class='date'>"
    date
    "</div> <div class='titre'>"
    "<a href='"
    adresse
    "'>"
    titre
    "</a></div> <div class='about'>"
    about
    "</div></li>"
  ))
)

(defun
  itemjournal
  (adresse titre about)
  (%raw (strcat
    "<li class='itemjournal'><a class='titre' href='"
    adresse
    "'>"
    titre
    "</a><div class='about'>"
    about
    "</div></li>"
  ))
)



;;; Les magnifiques fonctions de Laura, suite

(defun lienprec (liste)
  (if (not (null (precedent (pathname-name (current-lisp-file-pathname)) liste)))
     (strcat
      "<a class='prec' href='"
    (precedent-texte liste)
    ".html'>«««</a>"
)))

(defun liensuiv (liste)
  (if (not (null (suivant (pathname-name (current-lisp-file-pathname)) liste)))
     (strcat
      "<a class='suiv' href='"
    (suivant-texte liste)
    ".html'>»»»</a>"
)))

(defun
  precsuiv
  (titre adresse liste)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>"
    (lienprec liste)
    (liensuiv liste)
    "</div>"
)))

(defun oeuvres () (precsuiv "Œuvres" "guillaumin.html" serie_chronologique))

(defun corresp () (precsuiv "Correspondance" "correspondance.html" correspondance))
(defun arrivabene () (precsuiv "Lettres à Arrivabene" "lettres_comte_arrivabene.html" lettres_a_arrivabene))
(defun calmetes () (precsuiv "Lettres à Calmètes" "lettres_calmetes.html" lettres_a_calmetes))
(defun cheuvreux () (precsuiv "Lettres aux Cheuvreux" "lettres_cheuvreux.html" lettres_a_cheuvreux))
(defun cobden () (precsuiv "Lettres à Cobden" "lettres_cobden.html" lettres_a_cobden))
(defun coudroy () (precsuiv "Lettres à Coudroy" "lettres_coudroy.html" lettres_a_coudroy))
(defun domenger () (precsuiv "Lettres à Domenger" "lettres_domenger.html" lettres_a_domenger))
(defun paillottet () (precsuiv "Lettres à Paillottet" "lettres_paillottet.html" lettres_a_paillottet))
(defun say () (precsuiv "Lettres à H. Say" "lettres_horace_say.html" lettres_a_say))
(defun schwabe () (precsuiv "Lettres aux Schwabe" "lettres_schwabe.html" lettres_a_schwabe))

(defun art_le () (precsuiv "Libre-Échange" "journaux_le.html" articles_le))
(defun art_jde () (precsuiv "Journal des Économistes" "journaux_jde.html" articles_jde))
(defun art_mb () (precsuiv "Mémorial bordelais" "journaux_mb.html" articles_mb))
(defun art_cf () (precsuiv "Courrier français" "journaux_cf.html" articles_cf))
(defun art_rf () (precsuiv "La République française" "journaux_rf.html" articles_rf))
(defun art_jb () (precsuiv "Jacques Bonhomme" "journaux_jb.html" articles_jb))
(defun art_jd () (precsuiv "Journal des débats" "journaux_jd.html" articles_jd))
(defun art_sp () (precsuiv "Sentinelle des Pyrénées" "journaux_sp.html" articles_sp))

(defun harmonies () (precsuiv "Harmonies économiques" "harmonies.html" harmonies_eco))
(defun g_credit () (precsuiv "Gratuité du crédit" "gratuite_du_credit.html" credit))
(defun cobdenligue () (precsuiv "Cobden et la Ligue" "cobden_ligue.html" cobdenligue))
(defun prospo () (precsuiv "Propriété et spoliation" "propriete_et_spoliation.html" propriete_spoliation))

;;; jquery

(define (script_header)
(%raw "<script>$(window).on('scroll touchmove', function () {
    $('.header').toggleClass('tiny', $(document).scrollTop() > 75);
});</script>"
))

(defun header-url () (a :href "http://bastiat.org/" :class "url_bo" [http://bastiat.org/]))
(defun header (&rest r) (div :class "header" [,(titre(titre-courant))
  ,(header-url)
  ,(script_header)] r))

(defparameter *trusted-hosts* (list-to-hash-set '("bastiat.org")))

;à corriger pour permettre d'enlever la fonctionnalité sticky

(define (script_sidebar)
(%raw "<script>
  var width = $(window).width();
  var smallScreen = (width < 1000);
  var sideBar = $('#sidebar');
  var toggleSticky = function() {
      if (smallScreen) {
        noStick = 1;
        $('#sidebar').trigger('sticky_kit:detach');
      } else {
        noStick = 0;
      };
  };
  var stickySidebar = function() {
    sideBar.stick_in_parent();
  };
$(document).ready(function() {
  toggleSticky();
  stickySidebar();
  window.onresize = function() {
    toggleSticky();
    stickySidebar();
  };
});
</script>"))

(defun tous_les_scripts () [,(script_sidenotes)])
