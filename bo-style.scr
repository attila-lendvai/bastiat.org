;;;;; bo-style.scr -- Scribe style file for bastiat.org -*- Scheme -*-

(style 'fare-style)

;;; All that is to define correctly...

(define-markup (in-bo
                (:title #f) (:lang #f) (:charset *default-charset*))
  (apply* with-header :title title :lang lang :charset charset
	  :icon "pic/favicon.ico"
	  :css "bastiat.css"
	  '())
  (with-footer :left (bo-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [A site by ,(FRR) ,(webbug)]))

(define-markup (in-boe (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'en :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (boe-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [A site by ,(FRR) ,(webbug)]))

(define-markup (in-bof (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'fr :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (bof-ref #f (tt[Bastiat.org]))
	       :middle (strong(Lib.ref))
	       :right [Un site par ,(FRR) ,(webbug)]))

(define-markup (in-boes (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'es :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (boes-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [Un sitio por ,(FRR) ,(webbug)]))


(define (hist-note x) (*list "[" x "]"))
(define (xbof-ref file title)
  (if (file-exists? (make-string1 file ".scr"))
      (bof-ref file title)
      title))
(def-ref-maker elb-ref "http://www.econlib.org/library/Bastiat/")

;; Les éditions Leter ont disparu, et Michel Leter aussi. Paix à son âme.
;;(def-ref-maker leter-ref "http://aboutleter.chez.tiscali.fr/pages/etexts%20Bastiat/")
;; http://members.tripod.com/michelleter/pages/etextsbastiat/
(defun leter-ref (path &rest r) (declare (ignore path)) r)

(define-markup (cite-text (:file #f) . title)
   (let ((title (cite-title (apply* *list title))))
     (if file (bof-ref file title) title)))
(define-markup (make-char (:txt "") (:html #f) (:tex #f) (:info #f) (:man #f))
  (let ((foo (case *scribe-format*
	       ((txt) txt)
	       ((html) (or html txt))
	       ((tex) (or tex txt))
	       ((info) (or info txt))
	       ((man) (or man txt)))))
   (lambda () (display foo) #f)))
(define (quotation x) (p (it x)))

(define (tdRT . x) (apply* td :align 'right :valign 'top x))
(define (tdLT . x) (apply* td :align 'left :valign 'top x))
(define (tdRB . x) (apply* td :align 'right :valign 'bottom x))
(define (tdLB . x) (apply* td :align 'left :valign 'bottom x))
(define (trLT . x) (apply* tr (map* tdLT x)))
(define (trLT* x) (apply* trLT x))
(define (simple-table x) (apply* table (map* trLT* x)))
(define (tdRT2 . x) (apply* td :colspan 2 :align 'right :valign 'top x))
(define (tdLT2 . x) (apply* td :colspan 2 :align 'left :valign 'top x))
(define (tdCT . x) (apply* td :align 'center :valign 'top x))
(define (tdCB . x) (apply* td :align 'center :valign 'bottom x))
(define (tdCT2 . x) (apply* td :colspan 2 :align 'center :valign 'top x))
(define (tdCB2 . x) (apply* td :colspan 2 :align 'center :valign 'bottom x))
(define (enFr x) (*list x (nbsp) "fr."))


(define (ELeter)
  (leter-ref "Fr%8Ed%8Eric%20Bastiat"
	     [Édition Leter des ,(oe)uvres complètes de Frédéric Bastiat]))

(define (Har-ref x) (bof-ref "harmonies" (cite-title x)))
(define (Soph-ref x) (bof-ref "sophismes" (cite-title x)))
(define (Grat-ref x) (bof-ref "gratuite_du_credit" (cite-title x)))
(define (HarmoniesEconomiques) (Har-ref [Harmonies Économiques]))
(define (Harmonies_economiques) (Har-ref [Harmonies économiques]))
(define (SophismesEconomiques) (Soph-ref [Sophismes Économiques]))
(define (Sophismes_economiques) (Soph-ref [Sophismes économiques]))
(define (GratuiteCredit) (Grat-ref [Gratuité du Crédit]))
(define (Gratuite_credit) (Grat-ref [Gratuité du crédit]))

(define (AlainMadelin)
  (ref :url "http://www.alainmadelin.com/"
	[Alain Madelin]))
(define (pmadrolle)
  (ref :url "http://ami.du.laissez-faire.eu/"
	[Patrick Madrolle]))
(define (belem)
  (ref :url "http://lemennicier.com/"
	[Bertrand Lemennicier]))
(define (JML)
  (ref :url "http://www.nouveau-monde.org/" [Jean-Michel Leloup]))
(define (cbalanca) [Claude Balança]) ; MIA http://www.ibastiat.com/
(define (clement.junca)
  [Clément J])
  ;;(ref :url "http://fr.wikipedia.org/wiki/Utilisateur:Eudoxe" [Clément Junca])
(define (cvincent)
  (ref :url "http://perso.club-internet.fr/cvincent/" [Christophe Vincent]))
(define (frk.paris)
  ;(ref :url "http://perso.wanadoo.fr/arcadie/" [Franck Paris])
  [FP])
(define (bruno)
  (ref :url "http://www.fdn.fr/~brouchou/toutenvrac/" [Bruno Rouchouse]))
(define (JdG) [Jacques de Guenin])
(define (andre) [André de Guenin])
(define (laura) [Laura Le Coz])
(define (loic) [Loïc Étienne])
(define (fguerinet) [Franck Guérinet])
(define (krylenko)
	(ref :url "http://www.krylenko.net/index.php/Bastiat"
	     [Krylenko])) ; JB
(define (leter) (ref :url "http://leter.net/" [Michel Leter]))
(define (GregB) [Gregory Bodylski])
(define (WikiSourceFr)
  (ref :url "http://fr.wikisource.org/"
	[WikiSource]))
(define (numeriseurs)
  (ref :url [mailto:numeriseurs,(at)bastiat.net]
      [numeriseurs,(at)bastiat.net]))
(define (bastiat.ftp)
  (ref :url "ftp://numerisons@bastiat.mine.nu"
	(tt[ftp://numerisons,(at)bastiat.mine.nu])))
(define (Bastiat.org)
  (ref :url =bo.url= [Bastiat.org]))
(define (Scribe.url)
  (ref :url "http://www-sop.inria.fr/mimosa/fp/Scribe/" [Scribe]))
(define (Exscribe.url)
  (ref :url "http://www.cliki.net/Exscribe" [Exscribe]))
(define (oeuvres.completes.FB)
  [,(ref :url "guillaumin.html" [,(oe)uvres complètes])
	de Frédéric Bastiat])
(def-ref-maker BNF-ref "http://gallica.bnf.fr/" [BNF] "")
(define (Gallica)
  (BNF-ref #f [gallica.bnf.fr]))
(define (BNF)
  (BNF-ref #f [BNF]))
(define (Gallica.Bastiat.ref x)
  (BNF-ref "metacata.idq?Mod=i&CiRestriction=%28%40_Auteur%20bastiat%29&RPT=" x))
(define (FEE)
  (ref :url "http://www.fee.org/" [FEE]))
(define (NdEBO)
  (it [(Note de l'éditeur de ,(Bastiat.org).)]))
(define (NdEEF)
  (it [(Note de l'éditeur de l'édition de la ,(FEE).)]))
(define (NdML)
  (it [(Note de ,(leter))]))
(define (EO18xx v a)
  [édition originale en ,(id v) volumes (18,(id a))
	des ,(oeuvres.completes.FB)])
(define (EO1854) (EO18xx 6 54))
(define (EO1855) (EO18xx 6 55))
(define (EO1862) (EO18xx 7 62))
(define (EO1863) (EO18xx 7 63))
(define (EO1864) (EO18xx 7 64))

(set! *scribe-background* "white")
(set! *scribe-foreground* "black")
(set! *scribe-tbackground* "#99FF6F")
(define *section-title-background* "#CCFFB8")

(define bo-header-args
  '(:textcolor "black" :bgcolor "white"
    :icon "http://bastiat.org/pic/favicon.ico"))

(define (roman-name num)
  (vector-ref
	'#(#f "I" "II" "III" "IV" "V" "VI" "VII" "VIII" "IX"
	   "X" "XI" "XII" "XIII" "XIV" "XV" "XVI" "XVII" "XVIII" "XIX" "XX")
	num))

(define (tradlink a b . rest)
 (if (keyword? a)
     (case a
       ((:bof) (*list* (bof-ref b (car rest)) (cdr rest)))
       ((:bof-) (*list* (bof-ref b (car rest) (cadr rest)) (cddr rest)))
       ((:boe) (*list* (boe-ref b (car rest)) (cdr rest)))
       ((:boes) (*list* (boes-ref b (car rest)) (cdr rest)))
       ((:elb) (*list* (elb-ref b (car rest)) (cdr rest)))
       ((:elb-) (*list* (elb-ref b (car rest) (cadr rest)) (cddr rest))))
     (*list* (ref :url a b) rest)))
(define (trad x)
   (inbracket
    (*list*
     (join* "; "
	    (map* (lambda (x) (apply* tradlink x)) x)))))
