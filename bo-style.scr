;;;;; bo-style.scr -- Scribe style file for bastiat.org -*- Lisp -*-

(style 'fare-style)
(style 'oeuvres_bastiat)

;;; All that is to define correctly...

(define-markup (in-bo
                (:title #f) (:lang #f) (:charset *default-charset*))
  (apply* with-header :title title :lang lang :charset charset
	  :icon "pic/favicon.ico"
	  :css "bastiat.css"
	  '())
  (with-footer :left (bo-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [A site by ,(FRR) ,(webbug)]))

(define-markup (in-boe (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'en :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (boe-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [A site by ,(FRR) ,(webbug)]))

(define-markup (in-bof (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'fr :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (bof-ref #f (tt[Bastiat.org]))
	       :middle (strong(Lib.ref))
	       :right [Un site par ,(FRR) ,(webbug)]))

(define-markup (in-boes (:title #f) (:charset *default-charset*))
  (apply* with-header :title title :lang 'es :charset charset
	  :icon "../pic/favicon.ico"
	  :css "../bastiat.css"
	  '())
  (with-footer :left (boes-ref #f (tt[Bastiat.org]))
	       :middle (strong(Liben.ref))
	       :right [Un sitio por ,(FRR) ,(webbug)]))


(define (hist-note x) (*list "[" x "]"))
(define (xbof-ref file title)
  (if (file-exists? (make-string1 file ".scr"))
      (bof-ref file title)
      title))
(def-ref-maker elb-ref "http://www.econlib.org/library/Bastiat/")

;; Les éditions Leter ont disparu, et Michel Leter aussi. Paix à son âme.
;;(def-ref-maker leter-ref "http://aboutleter.chez.tiscali.fr/pages/etexts%20Bastiat/")
;; http://members.tripod.com/michelleter/pages/etextsbastiat/
(defun leter-ref (path &rest r) (declare (ignore path)) r)

(define-markup (cite-text (:file #f) . title)
   (let ((title (cite-title (apply* *list title))))
     (if file (bof-ref file title) title)))
(define-markup (make-char (:txt "") (:html #f) (:tex #f) (:info #f) (:man #f))
  (let ((foo (case *scribe-format*
	       ((txt) txt)
	       ((html) (or html txt))
	       ((tex) (or tex txt))
	       ((info) (or info txt))
	       ((man) (or man txt)))))
   (lambda () (display foo) #f)))
(define (quotation x) (p (it x)))

(define (tdRT . x) (apply* td :align 'right :valign 'top x))
(define (tdLT . x) (apply* td :align 'left :valign 'top x))
(define (tdRB . x) (apply* td :align 'right :valign 'bottom x))
(define (tdLB . x) (apply* td :align 'left :valign 'bottom x))
(define (trLT . x) (apply* tr (map* tdLT x)))
(define (trLT* x) (apply* trLT x))
(define (simple-table x) (apply* table (map* trLT* x)))
(define (tdRT2 . x) (apply* td :colspan 2 :align 'right :valign 'top x))
(define (tdLT2 . x) (apply* td :colspan 2 :align 'left :valign 'top x))
(define (tdCT . x) (apply* td :align 'center :valign 'top x))
(define (tdCB . x) (apply* td :align 'center :valign 'bottom x))
(define (tdCT2 . x) (apply* td :colspan 2 :align 'center :valign 'top x))
(define (tdCB2 . x) (apply* td :colspan 2 :align 'center :valign 'bottom x))
(define (enFr x) (*list x (nbsp) "fr."))


(define (ELeter)
  (leter-ref "Fr%8Ed%8Eric%20Bastiat"
	     [Édition Leter des ,(oe)uvres complètes de Frédéric Bastiat]))

(define (Har-ref x) (bof-ref "harmonies" (cite-title x)))
(define (Soph-ref x) (bof-ref "sophismes" (cite-title x)))
(define (Grat-ref x) (bof-ref "gratuite_du_credit" (cite-title x)))
(define (HarmoniesEconomiques) (Har-ref [Harmonies Économiques]))
(define (Harmonies_economiques) (Har-ref [Harmonies économiques]))
(define (SophismesEconomiques) (Soph-ref [Sophismes Économiques]))
(define (Sophismes_economiques) (Soph-ref [Sophismes économiques]))
(define (GratuiteCredit) (Grat-ref [Gratuité du Crédit]))
(define (Gratuite_credit) (Grat-ref [Gratuité du crédit]))

(define (AlainMadelin)
  (ref :url "http://www.alainmadelin.com/"
	[Alain Madelin]))
(define (pmadrolle)
  (ref :url "http://ami.du.laissez-faire.eu/"
	[Patrick Madrolle]))
(define (belem)
  (ref :url "http://lemennicier.com/"
	[Bertrand Lemennicier]))
(define (JML)
  (ref :url "http://www.nouveau-monde.org/" [Jean-Michel Leloup]))
(define (cbalanca) [Claude Balança]) ; MIA http://www.ibastiat.com/
(define (clement.junca)
  [Clément J])
  ;;(ref :url "http://fr.wikipedia.org/wiki/Utilisateur:Eudoxe" [Clément Junca])
(define (cvincent)
  (ref :url "http://perso.club-internet.fr/cvincent/" [Christophe Vincent]))
(define (frk.paris)
  ;(ref :url "http://perso.wanadoo.fr/arcadie/" [Franck Paris])
  [FP])
(define (bruno)
  (ref :url "http://www.fdn.fr/~brouchou/toutenvrac/" [Bruno Rouchouse]))
(define (JdG) [Jacques de Guenin])
(define (andre) [André de Guenin])
(define (laura) [Laura Le Coz])
(define (loic) [Loïc Étienne])
(define (fguerinet) [Franck Guérinet])
(define (krylenko)
	(ref :url "http://www.krylenko.net/index.php/Bastiat"
	     [Krylenko])) ; JB
(define (leter) (ref :url "http://leter.net/" [Michel Leter]))
(define (GregB) [Gregory Bodylski])
(define (WikiSourceFr)
  (ref :url "http://fr.wikisource.org/"
	[WikiSource]))
(define (numeriseurs)
  (ref :url [mailto:numeriseurs,(at)bastiat.net]
      [numeriseurs,(at)bastiat.net]))
(define (bastiat.ftp)
  (ref :url "ftp://numerisons@bastiat.mine.nu"
	(tt[ftp://numerisons,(at)bastiat.mine.nu])))
(define (Bastiat.org)
  (ref :url =bo.url= [Bastiat.org]))
(define (Scribe.url)
  (ref :url "http://www-sop.inria.fr/mimosa/fp/Scribe/" [Scribe]))
(define (Exscribe.url)
  (ref :url "http://www.cliki.net/Exscribe" [Exscribe]))
(define (oeuvres.completes.FB)
  [,(ref :url "guillaumin.html" [,(oe)uvres complètes])
	de Frédéric Bastiat])
(def-ref-maker BNF-ref "http://gallica.bnf.fr/" [BNF] "")
(define (Gallica)
  (BNF-ref #f [gallica.bnf.fr]))
(define (BNF)
  (BNF-ref #f [BNF]))
(define (Gallica.Bastiat.ref x)
  (BNF-ref "metacata.idq?Mod=i&CiRestriction=%28%40_Auteur%20bastiat%29&RPT=" x))
(define (FEE)
  (ref :url "http://www.fee.org/" [FEE]))
(define (NdEBO)
  (it [(Note de l'éditeur de ,(Bastiat.org).)]))
(define (NdEEF)
  (it [(Note de l'éditeur de l'édition de la ,(FEE).)]))
(define (NdML)
  (it [(Note de ,(leter))]))
(define (EO18xx v a)
  [édition originale en ,(id v) volumes (18,(id a))
	des ,(oeuvres.completes.FB)])
(define (EO1854) (EO18xx 6 54))
(define (EO1855) (EO18xx 6 55))
(define (EO1862) (EO18xx 7 62))
(define (EO1863) (EO18xx 7 63))
(define (EO1864) (EO18xx 7 64))

(set! *scribe-background* "white")
(set! *scribe-foreground* "black")
(set! *scribe-tbackground* "#99FF6F")
(define *section-title-background* "#CCFFB8")

(define bo-header-args
  '(:textcolor "black" :bgcolor "white"
    :icon "http://bastiat.org/pic/favicon.ico"))

(define (roman-name num)
  (vector-ref
	'#(#f "I" "II" "III" "IV" "V" "VI" "VII" "VIII" "IX"
	   "X" "XI" "XII" "XIII" "XIV" "XV" "XVI" "XVII" "XVIII" "XIX" "XX")
	num))

(define (tradlink a b . rest)
 (if (keyword? a)
     (case a
       ((:bof) (*list* (bof-ref b (car rest)) (cdr rest)))
       ((:bof-) (*list* (bof-ref b (car rest) (cadr rest)) (cddr rest)))
       ((:boe) (*list* (boe-ref b (car rest)) (cdr rest)))
       ((:boes) (*list* (boes-ref b (car rest)) (cdr rest)))
       ((:elb) (*list* (elb-ref b (car rest)) (cdr rest)))
       ((:elb-) (*list* (elb-ref b (car rest) (cadr rest)) (cddr rest))))
     (*list* (ref :url a b) rest)))
(define (trad x)
   (inbracket
    (*list*
     (join* "; "
	    (map* (lambda (x) (apply* tradlink x)) x)))))


;;;        *** Les magnifiques fonctions de Laura *** (Car Laura met des commentaires, elle.)

(define (NdL)
  (it [(Note de Laura)]))

;;Mise en forme des liens

; Liens vers l'index des noms de personnes
(defun np (x &rest r) (a :href (strcat "personnes.html#" x) :class "np" r))

; Liens vers l'index des titres de journaux
(defun tj (x &rest r) (a :href (strcat "journaux.html#" x) :class "tj" r))
;mettre r en italique

;Classe "bastiat" pour enrober le texte de Bastiat
(defun bastiat (&rest r) (div :class "bastiat" r))
;pour les textes d'autres auteurs
(defun other (&rest r) (div :class "other" r))

(defun sommaire (&rest r) (div :class "sommaire" r))
(defun chapeau (&rest r) (div :class "chapeau" r))

;style épistolaire
(defun cher (&rest r) (p :class "cher" r))
(defun politesse (&rest r) (p :class "politesse" r))
(defun sign (&rest r) (p :class "sign" r))
(defun date (&rest r) (div :class "date" r))
(define (FredB) [,(sc[Frédéric]) BASTIAT])

;pour les listes de paragraphes courts
(defun liste (&rest r) (div :class "liste" r))

;pour les épigraphes
(defun epigraphe (&rest r) (div :class "epigraphe" r))

(define (retrait) [      ])

;;; FOOTER

;pour le footer et le header inamovibles
(defun footer (&rest r) (div :class "footer" r))
(defun header (&rest r) (div :class "header" r))
(defun titre (&rest r) (div :class "titre" r))
(defun auteur (&rest r) (div :class "auteur" r))

(defun gauche (&rest r) (div :class "gauche" r))
;Notes marginales
(defun mnote (&rest r) (div :class "mnote" r))

;(Pour les liens retour/préc/suiv)
(defun
  arbor
  (titre adresse prec suiv)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='prec' href='"
    prec
    "'>«««</a>
    <a class='suiv' href='"
    suiv
    "'>»»»</a>
    </div>"
  ))
)

(defun
  premier
  (titre adresse suiv)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='suiv' href='"
    suiv
    "'>»»»</a>
    </div>"
  ))
)

(defun
  dernier
  (titre adresse prec)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='prec' href='"
    prec
    "'>«««</a>
    </div>"
  ))
)



(defun corresp (prec suiv) (arbor "Correspondance" "correspondance.html" prec suiv))
(defun soph (prec suiv) (arbor "Sophismes économiques" "sophismes.html" prec suiv))
(defun he (prec suiv) (arbor "Harmonies économiques" "harmonies.html" prec suiv))
(defun gc (prec suiv) (arbor "Gratuité du crédit" "gratuite_du_credit.html" prec suiv))
(defun ligue (prec suiv) (arbor "Cobden et la Ligue" "cobden_ligue.html" prec suiv))
(defun prospo (prec suiv) (arbor "Propriété et spoliation" "propriete_et_spoliation.html" prec suiv))

(defun acobden (prec suiv) (arbor "Lettres à Cobden" "lettres_cobden.html" prec suiv))
(defun acalmetes (prec suiv) (arbor "Lettres à Calmètes" "lettres_calmetes.html" prec suiv))
(defun acoudroy (prec suiv) (arbor "Lettres à Coudroy" "lettres_coudroy.html" prec suiv))
(defun asay (prec suiv) (arbor "Lettres à H. Say" "lettres_horace_say.html" prec suiv))
(defun aschwabe (prec suiv) (arbor "Lettres aux Schwabe" "lettres_schwabe.html" prec suiv))
(defun adomenger (prec suiv) (arbor "Lettres à Domenger" "lettres_domenger.html" prec suiv))
(defun acheuvreux (prec suiv) (arbor "Lettres aux Cheuvreux" "lettres_cheuvreux.html" prec suiv))
(defun apaillottet (prec suiv) (arbor "Lettres à Paillottet" "lettres_paillottet.html" prec suiv))

(defun jde (prec suiv) (arbor "Journal des Économistes" "journaux_jde.html" prec suiv))
(defun mb (prec suiv) (arbor "Mémorial bordelais" "journaux_mb.html" prec suiv))
(defun rf (prec suiv) (arbor "République française" "journaux_rf.html" prec suiv))
(defun jb (prec suiv) (arbor "Jacques Bonhomme" "journaux_jb.html" prec suiv))
(defun le (prec suiv) (arbor "Libre-Échange" "journaux_le.html" prec suiv))

;; Pour la mise en forme des listes d'articles dans les sommaires de journaux

(defun
  article
  (date adresse titre about)
  (%raw (strcat
    "<li class='article'><div class='date'>"
    date
    "</div> <div class='titre'>"
    "<a href='"
    adresse
    "'>"
    titre
    "</a></div> <div class='about'>"
    about
    "</div></li>"
  ))
)

(defun
  itemjournal
  (adresse titre about)
  (%raw (strcat
    "<li class='itemjournal'><a class='titre' href='"
    adresse
    "'>"
    titre
    "</a><div class='about'>"
    about
    "</div></li>"
  ))
)

;;; Les super fonctions relatives à bastiat-db

(defun filter-bastiat-db (fun)
  (remove-if-not
   (lambda (x)
     (handler-case
	 (apply fun x)
       (error (c)
	 (error "Error while filtering bastiat-db entry: ~S.~%Entry: ~S~%"
		c x))))
   bastiat-db))

(defmacro filtering-bastiat-db (&body body)
  `(filter-bastiat-db
    (lambda (id &key titre date livre journal lettre oc1862 &allow-other-keys) ,@body)))

(defun text-id (x) (first x))
(defun text-date (x) (getf (rest x) :date))
(defun text-livre (x) (getf (rest x) :livre))
(defun text-chapter (x) (getf (text-livre x) :ch))


(defparameter serie_chronologique
 (sort (filtering-bastiat-db (not (null date))) 'string< :key 'text-date)
)
(defparameter correspondance
 (sort (filtering-bastiat-db (not (null lettre))) 'string< :key 'text-date)
)
(defparameter articles
 (sort (filtering-bastiat-db (not (null journal))) 'string< :key 'text-date)
)


(defun precedent (item list &key (test 'string-equal) (key 'first))
  (loop :for precedent = nil :then courant :for courant :in list
    :when (funcall test item (funcall key courant))
    :return precedent))

(defun suivant (item list &key (test 'string-equal) (key 'first))
  (loop :for (courant suivant) :on list
    :when (funcall test item (funcall key courant))
    :return suivant))

(defun precedent (list &key (test 'string-equal) (key 'text-id))
  (loop :for (precedent courant) :on (append '(()) list '(()))
    :when (funcall test (pathname-name (current-lisp-file-pathname)) (funcall key courant))
    :return (string-downcase (text-id precedent))))

(defun suivant (list &key (test 'string-equal) (key 'text-id))
  (loop :for (courant suivant) :on (append '(()) list '(()))
    :when (funcall test (pathname-name (current-lisp-file-pathname)) (funcall key courant))
    :return (string-downcase (text-id suivant))))

;(sort ma-liste #'< :key (lambda (x) (destructuring-bind (id &key livre &allow-other-keys) (getf livre :ch))))
;(sort ma-liste #'string< :key (lambda (x) (getf (rest x) :date)))
;(sort ma-liste 'string< :key 'text-date)
;(sort ma-liste '< :key text-chapter)
;(uiop:current-lisp-file-pathname)


;;; Les magnifiques fonctions de Laura, suite


(defun
  precsuiv
  (titre adresse liste)
  (%raw (strcat
    "<div class='arbor'>
    <a class='retour' href='"
    adresse
    "'>"
    titre
    "</a>
    <a class='prec' href='"
    (precedent liste)
    ".html'>«««</a>
    <a class='suiv' href='"
    (suivant liste)
    ".html'>»»»</a>
    </div>"
  ))
)

(defun
  oeuvres ()
  (precsuiv "Œuvres" "oeuvres.html" serie_chronologique)
)


