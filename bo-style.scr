; bo-style.scr -- Scribe style file for bastiat.org -*- Scheme -*-
; $Id: bo-style.scr,v 1.71 2005/08/12 20:10:51 fare Exp $

; All that is to define correctly...
(define (subtitle x) (font :size +6 (center x)))
(define (strong x) (bold x))
(define (cite-title x) (it x))
(define (hist-note x) (list "[" x "]"))
(define (inlatin x) (it x))
(define (initalian x) (it x))
(define (inenglish x) (it x))
(define-markup (cite-text (:file #f) title)
   (let ((title (cite-title title)))
     (if file (bof-ref file title) title)))
(define-markup (make-char (:txt "") (:html #f) (:tex #f) (:info #f) (:man #f))
  (let ((foo (case *scribe-format*
	       ((txt) txt)
	       ((html) (or html txt))
	       ((tex) (or tex txt))
	       ((info) (or info txt))
	       ((man) (or man txt)))))
   (lambda () (display foo) #f)))
(define (copy) (make-char :txt "(c)" :html "&copy;" :tex "{\copy}"))
(define (oe) (make-char :txt "oe" :html "&oelig;" :tex "{\oe}"))
(define (ae) (make-char :txt "ae" :html "&aelig;" :tex "{\ae}"))
(define (OE) (make-char :txt "OE" :html "&OElig;" :tex "{\OE}"))
(define (AE) (make-char :txt "AE" :html "&AElig;" :tex "{\AE}"))
(define (at) (make-char :txt "@" :html "&#64;"))
(define (small x) (font :size -1 x))
(define (Ier) [I,(sup "er")])
(define (Iere) [I,(sup "ère")])
(define (1er) [1,(sup "er")])
(define (1ere) [1,(sup "ère")])
(define (1st) [1,(sup "st")])
(define (eme) (sup "ème"))
(define (2eme) [2,(eme)])
(define (3eme) [3,(eme)])
(define (4eme) [4,(eme)])
(define (5eme) [5,(eme)])
(define (6eme) [6,(eme)])
(define (7eme) [7,(eme)])
(define (8eme) [8,(eme)])
(define (9eme) [9,(eme)])
(define (10eme) [10,(eme)])
(define (11eme) [11,(eme)])
(define (12eme) [12,(eme)])
(define (13eme) [13,(eme)])
(define (14eme) [14,(eme)])
(define (2e) [2,(sup "e")])
(define (3e) [3,(sup "e")])
(define (5e) [5,(sup "e")])
(define (12e) [12,(sup "e")])
(define (20e) [20,(sup "e")])
(define (VIIe) [VII,(sup "e")])
(define (XIe) [XI,(sup "e")])
(define (XVIIIe) [XVIII,(sup "e")])
(define (XVIIIeme) [XVIII,(sup "ème")])
(define (XIXe) [XX,(sup "e")])
(define (XIXeme) [XIX,(sup "ème")])
(define (XXe) [XX,(sup "e")])
(define (XXeme) [XX,(eme)])
(define (Mme) [M,(sup "me")])
(define (1o) [1°])
(define (2o) [2°])
(define (3o) [3°])
(define (4o) [4°])
(define (nop . body) '())
(define (id x) x)
(define (inbracket x) (list "[" x "]"))
(define (quotation x) (p (it x)))
(define (1- n) (- n 1))
(define (nth ix seq)
  (if (zero? ix) (car seq) (nth (1- ix) (cdr seq))))
(define (nthcdr ix seq)
  (if (zero? ix) seq (nthcdr (1- ix) (cdr seq))))
(define (pv . rest) ";")

(define (string-cdr x) (substring x 1 (string-length x)))
(define (keyword->string1 x) (string-cdr (keyword->string x)))
(define (foo->string x)
  (cond ((string? x) x)
	((symbol? x) (symbol->string x))
	((keyword? x) (keyword->string1 x))
	((pair? x) (string-append (foo->string (car x))
				  (foo->string (cdr x))))
	((number? x) (number->string x))
	(else "")))
(define (make-string1 . x)
	(apply string-append (map foo->string x)))
(define (make-symbol . x)
	(string->symbol (apply make-string1 x)))

(define (open-tag t attributes close)
   (lambda ()
      (for-each display (list '< (foo->string t)))
      (for-each (lambda (x)
		  (display " ")
		  (display (keyword->string1 (car x)))
		  (display "=\"")
		  (display (cdr x))
		  (display "\""))
	  attributes)
      (if close (display " /"))
      (display '>)
      #f))
(define (close-tag t)
   (lambda () (for-each display (list '</ (foo->string t) '>))))
(define (tag-attr t kont x)
  (let rec ((x x) (attributes '()))
    (if (and (pair? x) (pair? (cdr x)) (keyword? (car x)))
	(rec (cddr x) (cons (cons (car x) (cadr x)) attributes))
      (kont t (reverse attributes) x))))
(define (do-tag t attr args)
   (list (open-tag t attr #f)
	 args
	 (close-tag t)))
(define (do-xtag t attr args)
   (if (null? args) (open-tag t attr #t) (do-tag t attr args)))
(define (do-stag t attr args)
   (open-tag t attr #f))
(define (tag t . x) (tag-attr t do-tag x))
(define (xtag t . x) (tag-attr t do-xtag x))
(define (stag t . x) (tag-attr t do-stag x))
(define (ctag t) (close-tag t))
(define (http-equiv x y) (xtag :meta :http-equiv x :content y))
(define (metanc x y) (xtag :meta :name x :content y))
(define (make-tag t) (lambda x (apply tag t x)))
(define-macro (define-tags . tags)
   `(begin ,@(map (lambda (x) `(define ,x (make-tag ',x))) tags)))
(define-tags h1 h2 h3 h4 h5 h6)
(define (maybe-list-ref l n)
  (and (pair? l) (if (= n 0) (car l) (maybe-list-ref (cdr l) (1- n)))))
(define (ref-maker-body b d s . r)
  (let* ((x (maybe-list-ref r 0))
	 (x1 (maybe-list-ref r 1))
	 (x2 (maybe-list-ref r 2))
	 (t (or x2 x1))
	 (a (and x2 x1)))
    (ref :url (make-string1 b (if x (cons x s)) (if a (cons "#" a)))
	 (or t d))))
(define-macro (ref-maker b . r)
  (let ((x (gensym))
	(d (maybe-list-ref r 0))
	(s (maybe-list-ref r 1)))
  `(lambda ,x
     (apply ref-maker-body ,b ,d ,(or s ".html") ,x))))

(define (%raw x) (lambda () (display x) #f))
(define (raw-environment pre post)
  (let ((pre (%raw pre)) (post (%raw post)))
    (lambda (x) (list pre x post))))
(define-markup (format-selector
		 (:txt #f) (:html #f) (:tex #f) (:info #f) (:man #f))
  (case *scribe-format*
    ((txt) txt)
    ((html) (or html txt))
    ((tex) (or tex txt))
    ((info) (or info txt))
    ((man) (or man txt))))
(define-markup (make-glyph (:txt "") (:html #f) (:tex #f) (:info #f) (:man #f))
  (let ((foo (format-selector :txt txt
			      :html html :tex tex :info info :man man)))
   (%raw foo)))
(define-markup (make-environment
		 (:txt (lambda (x) x))
		 (:html #f) (:tex #f) (:info #f) (:man #f))
  (format-selector :txt txt :html html :tex tex :info info :man man))
(define (nbsp) (make-glyph :txt " " :html "&nbsp;" :tex "~"))
(define (--) (make-glyph :txt "--" :html "&#151;" :tex "---"))
(define (br) (make-glyph :txt "\n" :html "<br>\n" :tex "\\\\{}"))
(define (hr) (make-glyph :txt "\n---\n" :html "<hr></hr>\n" :tex "\\\\{}"))
(define p-justify (make-environment
		    :txt p
		    :html (raw-environment "<p align=\"justify\">" "</p>")))
(define blockquote (make-environment
		    :tex (raw-environment "\begin{quotation}"
					  "\end{quotation}")
		    :html (raw-environment "<blockquote>" "</blockquote>")))
(set! q (make-environment
	    :txt (raw-environment "« " " »")
	    :tex (raw-environment "«~" "~»")
	    :html (raw-environment "«&nbsp;" "&nbsp;»")))
(define (br* . x)
   (cond ((null? x) x)
	 ((null? (cdr x)) x)
	 (else (list (car x) (br) (apply br* (cdr x))))))
(define (verses . x)
  (blockquote (apply br* x)))
(define (blockquote* . x)
  (blockquote (apply p* x)))
(define (footnote* . l) (footnote :note (apply cheat-p* l)))
(define (cheat-p* . l)
  (cond ((null? l) l)
	((null? (cdr l)) l)
	(else (cons (car l) (apply p* (cdr l))))))

(define (XXX . rest) '())
(define (p* . rest) (map p-justify rest))

(define (tdRT . x) (apply td :align 'right :valign 'top x))
(define (tdLT . x) (apply td :align 'left :valign 'top x))
(define (tdRB . x) (apply td :align 'right :valign 'bottom x))
(define (tdLB . x) (apply td :align 'left :valign 'bottom x))
(define (trLT . x) (apply tr (map tdLT x)))
(define (trLT* x) (apply trLT x))
(define (simple-table x) (apply table (map trLT* x)))

(define (xbof-ref file title)
  (if (file-exists? (make-string1 file ".scr"))
      (bof-ref file title)
      title))
(define =bo.url= "http://bastiat.org/")
(define bo-ref (ref-maker =bo.url=))
(define =bof.url= "http://bastiat.org/fr/")
(define bof-ref (ref-maker =bof.url=))
(define =boe.url= "http://bastiat.org/en/")
(define boe-ref (ref-maker =boe.url=))
(define =boes.url= "http://bastiat.org/es/")
(define boes-ref (ref-maker =boes.url=))
(define elb-ref (ref-maker "http://www.econlib.org/library/Bastiat/"))
(define leter-ref (ref-maker "http://aboutleter.chez.tiscali.fr/pages/etexts%20Bastiat/"))
; http://members.tripod.com/michelleter/pages/etextsbastiat/
(define =fare.url= "http://fare.tunes.org/")
(define Lib.ref (ref-maker (cons =fare.url= "liberalisme/")
			"Le Libéralisme, le vrai"))
(define Liben.ref (ref-maker (cons =fare.url= "liberty/")
			"Liberty, as it is"))
(define Fare-ref (ref-maker =fare.url=
			"fare.tunes.org"))
(define Scribe.ref (ref-maker "http://www-sop.inria.fr/mimosa/fp/Scribe/"
			"Scribe"))
(define mfc-ref (ref-maker =mfc.url=))
(define =mfc.url= "http://bastiat.org/marche/")

(define (ELeter)
  (leter-ref "Fr%8Ed%8Eric%20Bastiat"
	     [Édition Leter des ,(oe)uvres complètes de Frédéric Bastiat]))

(define (Har-ref x) (bof-ref "harmonies" (cite-title x)))
(define (Soph-ref x) (bof-ref "sophismes" (cite-title x)))
(define (Grat-ref x) (bof-ref "gratuite_du_credit" (cite-title x)))
(define (HarmoniesEconomiques) (Har-ref [Harmonies Économiques]))
(define (Harmonieseconomiques) (Har-ref [Harmonies économiques]))
(define (SophismesEconomiques) (Soph-ref [Sophismes Économiques]))
(define (Sophismeseconomiques) (Soph-ref [Sophismes économiques]))
(define (GratuiteCredit) (Grat-ref [Gratuité du Crédit]))
(define (Gratuitecredit) (Grat-ref [Gratuité du crédit]))

(define (AlainMadelin)
  (ref :url "http://www.alainmadelin.com/"
	[Alain Madelin]))
(define (pmadrolle)
  (ref :url "http://perso.wanadoo.fr/patrick.madrolle/economie/"
	[Patrick Madrolle]))
(define (belem)
  (ref :url "http://lemennicier.com/"
	[Bertrand Lemennicier]))
(define (JML)
  (ref :url "http://www.nouveau-monde.org/" [Jean-Michel Leloup]))
(define (cbalanca)
  (ref :url "http://www.ibastiat.com/" [Claude Balança]))
  ; claudebalanca@ibastiat.com
(define (clement.junca)
  (ref :url "http://fr.wikipedia.org/wiki/Utilisateur:Eudoxe" [Clément Junca]))
(define (cvincent)
  (ref :url "http://perso.club-internet.fr/cvincent/" [Christophe Vincent]))
(define (frk.paris)
  (ref :url "http://perso.wanadoo.fr/arcadie/" [Franck Paris]))
(define (bruno)
  (ref :url "http://www.fdn.fr/~brouchou/toutenvrac/" [Bruno Rouchouse]))
(define (andre) [André de Guenin])
(define (loic) [Loïc Etienne])
(define (fguerinet) [Franck Guérinet])
(define (krylenko)
	(ref :url "http://www.krylenko.net/index.php/Bastiat"
	     [Krylenko])) ; JB
(define (leter) (ref :url "http://leter.net/" [Michel Leter]))
(define (GregB) [Gregory Bodylski])
(define (FRR) (Fare-ref #f "Faré Rideau"))
(define (numeriseurs)
  (ref :url [mailto:numeriseurs,(at)bastiat.net]
      [numeriseurs,(at)bastiat.net]))
(define (bastiat.ftp)
  (ref :url "ftp://numerisons@bastiat.mine.nu"
	(tt[ftp://numerisons,(at)bastiat.mine.nu])))
(define (Bastiat.org)
  (ref :url =bo.url= [Bastiat.org]))
(define (Scribe.url)
  (ref :url "http://www-sop.inria.fr/mimosa/fp/Scribe/" "Scribe"))
(define (oeuvres.completes.FB)
  [,(ref :url "guillaumin.html" [,(oe)uvres complètes])
	de Frédéric Bastiat])
(define (Gallica)
  (BNF-ref #f [gallica.bnf.fr]))
(define (BNF)
  (BNF-ref #f [BNF]))
(define BNF-ref (ref-maker "http://gallica.bnf.fr/" [BNF] ""))
(define (Gallica.Bastiat.ref x)
  (BNF-ref "metacata.idq?Mod=i&CiRestriction=%28%40_Auteur%20bastiat%29&RPT=" x))
(define (NdEBO)
  (it [(Note de l'éditeur de ,(Bastiat.org).)]))
(define (NdEEO)
  (it [(Note de l'éditeur de l'édition originale.)]))
(define (NdEEF)
  (it [(Note de l'éditeur de l'édition de la ,(FEE).)]))
(define (NdML)
  (it [(Note de ,(leter))]))
(define (NdT)
  (it [(Note du Traducteur)]))
(define (FEE)
  (ref :url "http://www.fee.org/" [FEE]))
(define (EO18xx v a)
  [édition originale en ,(id v) volumes (18,(id a))
	des ,(oeuvres.completes.FB)])
(define (EO1854) (EO18xx 6 54))
(define (EO1855) (EO18xx 6 55))
(define (EO1862) (EO18xx 7 62))
(define (EO1863) (EO18xx 7 63))
(define (EO1864) (EO18xx 7 64))

(define author-FB
 (author :name "Frédéric Bastiat"
	 :url (bo-ref #f =bo.url=)))
(define author-FRR
 (author :name "François-René Rideau"
	 :url (Fare-ref #f =fare.url=)))

(set! *scribe-background* "white")
(set! *scribe-foreground* "black")
(set! *scribe-tbackground* "#99FF6F")

(define doctype "<!doctype html public \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">")
(define (nedstatbasic id)
  (case *scribe-format*
    ((html)
     (lambda ()
       (for-each display
	     (list "<script language=\"JavaScript\" src=\"http://m1.nedstatbasic.net/basic.js\"></script><script language=\"JavaScript\"><!--
  nedstatbasic(\"" id "\", 0);
// --></script><noscript><a target=\"_blank\" href=\"http://v1.nedstatbasic.net/stats?" id "\"><img src=\"http://m1.nedstatbasic.net/n?id=" id "\" border=\"0\" nosave width=\"18\" height=\"18\"></a></noscript>
"))))))
(define *webbug* #f)
(define (webbug) *webbug*)
(define-markup (in-bo (:title #f) (:lang #f))
  (set! *webbug* (nedstatbasic "AB96kQQPKcA9hvtk46jfLrOJROZQ"))
  (apply with-header :title title :lang lang bo-header-args)
  (with-footer :lang lang))
(define-markup (in-boe (:title #f))
  (set! *webbug* (nedstatbasic "AB1t4Q0lGCThWKJZmCMwPijGBuvg"))
  (apply with-header :title title :lang 'en bo-header-args)
  (with-footer :lang 'en))
(define-markup (in-bof (:title #f))
  (set! *webbug* (nedstatbasic "AB1t5AEToaCwyNzVqItEA1IJ4eCg"))
  (apply with-header :title title :lang 'fr bo-header-args)
  (with-footer))
(define-markup (in-boes (:title #f))
  (set! *webbug* (nedstatbasic "AB96lAiJYmytD2BwLTX0J8Im4GXg"))
  (set! NdEEO (lambda () (emph[(Nota del editor de la edición original.)])))
  (set! NdT (lambda () (emph[(Nota del Traductor.)])))
  (apply with-header :title title :lang 'es bo-header-args)
  (with-footer :lang 'es))
(define bo-header-args
  '(:textcolor "black" :bgcolor "white"
    :icon "http://bastiat.org/pic/favicon.ico"))
(define-markup (with-header (:title #f) (:lang #f) (:icon #f)
        (:textcolor #f) (:bgcolor #f) (:linkcolor #f)
	(:charset "iso-8859-1") . head)
  (set! *scribe-header*
	(format-selector :txt "" :html
	(list
	 (%raw doctype) "\n"
	 (%raw "<html>") "\n"
	 (tag :head "\n"
	      (if lang (http-equiv "Content-Language" lang)) "\n"
	      (http-equiv "Content-Type"
			  (make-string1 "text/html; charset=" charset)) "\n"
	      (if icon (xtag :link :rel "shortcut icon" :type "image/x-icon"
			    :href icon)) "\n"
	      head
	      (if title (tag :title title)) "\n")
	 (apply stag :body
		     (append (if bgcolor (list :bgcolor bgcolor) '())
			     (if textcolor (list :text textcolor) '())
			     (if linkcolor (list :link linkcolor) '())))
	      "\n")))
  '())
(define-markup (with-footer (:lang 'fr)  . body)
  (set! *scribe-footer*
	(format-selector :txt "" :html
	(list
	 (hrule) "\n\n"
	 (font :size -1
	  body
	  (case lang
	    ((fr)
	  (table :width "100%" (tr
	  (td :width "25%" :align 'left (bof-ref #f (tt[Bastiat.org])))
	  (td :width "50%" :align 'center (strong(Lib.ref)))
	  (td :width "25%"  :align 'right
		 [Un site par ,(FRR) ,(webbug)]))))
	    ((en)
	  (table :width "100%" (tr
	  (td :width "25%" :align 'left (boe-ref #f (tt[Bastiat.org])))
	  (td :width "50%" :align 'center (strong(Liben.ref)))
	  (td :width "25%"  :align 'right
		 [A site by ,(FRR) ,(webbug)]))))
	    ((es)
	  (table :width "100%" (tr
	  (td :width "25%" :align 'left (boes-ref #f (tt[Bastiat.org])))
	  (td :width "50%" :align 'center (strong(Liben.ref)))
	  (td :width "25%"  :align 'right
		 [Un sitio por ,(FRR) ,(webbug)]))))
	       )))))
  '())
(with-footer)

(define (join* s l)
  (cond ((null? l) l)
	((null? (cdr l)) l)
	(else (cons (car l) (cons s (join* s (cdr l)))))))

(define (roman-name num)
  (vector-ref
	'#(#f "I" "II" "III" "IV" "V" "VI" "VII" "VIII" "IX"
	   "X" "XI" "XII" "XIII" "XIV" "XV" "XVI" "XVII" "XVIII" "XIX" "XX")
	num))

(define (last x) (cond ((null? x) #f) ((null? (cdr x)) (car x)) (else (last (cdr x)))))
(define (tradlink a b . rest)
  (case a
    ((:bof) (cons (bof-ref b (car rest)) (cdr rest)))
    ((:bof-) (cons (bof-ref b (car rest) (cadr rest)) (cddr rest)))
    ((:boe) (cons (boe-ref b (car rest)) (cdr rest)))
    ((:boes) (cons (boes-ref b (car rest)) (cdr rest)))
    ((:elb) (cons (elb-ref b (car rest)) (cdr rest)))
    ((:elb-) (cons (elb-ref b (car rest) (cadr rest)) (cddr rest)))
    (else (cons (ref :url a b) rest))))
(define (trad x)
   (inbracket
    (join* "; "
     (map (lambda (x) (apply tradlink x)) x))))
(define (date-tag x)
  (tag :p :align 'right x))
